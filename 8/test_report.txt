TAP version 13
# âœ… Validation successful!
# Validated data: {
#   "id": "user_12345",
#   "name": "John Doe",
#   "email": "john.doe@example.com",
#   "age": 30,
#   "isActive": true,
#   "tags": [
#     "developer",
#     "designer",
#     "team-lead"
#   ],
#   "address": {
#     "street": "123 Main Street",
#     "city": "Anytown",
#     "postalCode": "12345-6789",
#     "country": "USA"
#   },
#   "metadata": {
#     "source": "signup_form",
#     "campaign": "summer_2024"
#   },
#   "createdAt": "2024-01-15T10:30:00.000Z"
# }
# ðŸ§ª All tests completed successfully!
# Subtest: ValidationResult
    # Subtest: should create successful result
    ok 1 - should create successful result
      ---
      duration_ms: 1.250709
      type: 'test'
      ...
    # Subtest: should create error result
    ok 2 - should create error result
      ---
      duration_ms: 0.126667
      type: 'test'
      ...
    1..2
ok 1 - ValidationResult
  ---
  duration_ms: 1.962166
  type: 'suite'
  ...
# Subtest: StringValidator
    # Subtest: should validate basic string
    ok 1 - should validate basic string
      ---
      duration_ms: 0.205791
      type: 'test'
      ...
    # Subtest: should reject non-string types
    ok 2 - should reject non-string types
      ---
      duration_ms: 0.105417
      type: 'test'
      ...
    # Subtest: should handle optional strings
    ok 3 - should handle optional strings
      ---
      duration_ms: 0.060625
      type: 'test'
      ...
    # Subtest: should validate string length constraints
    ok 4 - should validate string length constraints
      ---
      duration_ms: 0.06
      type: 'test'
      ...
    # Subtest: should validate regex patterns
    ok 5 - should validate regex patterns
      ---
      duration_ms: 0.093667
      type: 'test'
      ...
    # Subtest: should validate email format
    ok 6 - should validate email format
      ---
      duration_ms: 0.072166
      type: 'test'
      ...
    # Subtest: should validate URL format
    ok 7 - should validate URL format
      ---
      duration_ms: 0.084708
      type: 'test'
      ...
    # Subtest: should validate enum values
    ok 8 - should validate enum values
      ---
      duration_ms: 0.049917
      type: 'test'
      ...
    # Subtest: should use custom error messages
    ok 9 - should use custom error messages
      ---
      duration_ms: 0.041666
      type: 'test'
      ...
    1..9
ok 2 - StringValidator
  ---
  duration_ms: 1.65575
  type: 'suite'
  ...
# Subtest: NumberValidator
    # Subtest: should validate basic number
    ok 1 - should validate basic number
      ---
      duration_ms: 0.0845
      type: 'test'
      ...
    # Subtest: should reject non-number types
    ok 2 - should reject non-number types
      ---
      duration_ms: 0.052917
      type: 'test'
      ...
    # Subtest: should reject NaN
    ok 3 - should reject NaN
      ---
      duration_ms: 0.045292
      type: 'test'
      ...
    # Subtest: should handle optional numbers
    ok 4 - should handle optional numbers
      ---
      duration_ms: 0.040958
      type: 'test'
      ...
    # Subtest: should validate number range
    ok 5 - should validate number range
      ---
      duration_ms: 0.053041
      type: 'test'
      ...
    # Subtest: should validate integer constraint
    ok 6 - should validate integer constraint
      ---
      duration_ms: 0.04475
      type: 'test'
      ...
    # Subtest: should validate positive constraint
    ok 7 - should validate positive constraint
      ---
      duration_ms: 0.056417
      type: 'test'
      ...
    # Subtest: should combine multiple constraints
    ok 8 - should combine multiple constraints
      ---
      duration_ms: 0.044875
      type: 'test'
      ...
    1..8
ok 3 - NumberValidator
  ---
  duration_ms: 0.534084
  type: 'suite'
  ...
# Subtest: BooleanValidator
    # Subtest: should validate true
    ok 1 - should validate true
      ---
      duration_ms: 0.124709
      type: 'test'
      ...
    # Subtest: should validate false
    ok 2 - should validate false
      ---
      duration_ms: 0.039584
      type: 'test'
      ...
    # Subtest: should reject non-boolean types
    ok 3 - should reject non-boolean types
      ---
      duration_ms: 0.045125
      type: 'test'
      ...
    # Subtest: should handle optional booleans
    ok 4 - should handle optional booleans
      ---
      duration_ms: 0.042417
      type: 'test'
      ...
    1..4
ok 4 - BooleanValidator
  ---
  duration_ms: 0.321042
  type: 'suite'
  ...
# Subtest: DateValidator
    # Subtest: should validate Date objects
    ok 1 - should validate Date objects
      ---
      duration_ms: 0.08525
      type: 'test'
      ...
    # Subtest: should validate date strings
    ok 2 - should validate date strings
      ---
      duration_ms: 0.041583
      type: 'test'
      ...
    # Subtest: should reject invalid date strings
    ok 3 - should reject invalid date strings
      ---
      duration_ms: 0.043167
      type: 'test'
      ...
    # Subtest: should reject non-date types
    ok 4 - should reject non-date types
      ---
      duration_ms: 0.042833
      type: 'test'
      ...
    # Subtest: should validate date ranges
    ok 5 - should validate date ranges
      ---
      duration_ms: 0.071458
      type: 'test'
      ...
    # Subtest: should handle optional dates
    ok 6 - should handle optional dates
      ---
      duration_ms: 0.039
      type: 'test'
      ...
    1..6
ok 5 - DateValidator
  ---
  duration_ms: 0.414833
  type: 'suite'
  ...
# Subtest: ArrayValidator
    # Subtest: should validate arrays with correct item types
    ok 1 - should validate arrays with correct item types
      ---
      duration_ms: 0.081459
      type: 'test'
      ...
    # Subtest: should reject non-arrays
    ok 2 - should reject non-arrays
      ---
      duration_ms: 0.559083
      type: 'test'
      ...
    # Subtest: should validate array length constraints
    ok 3 - should validate array length constraints
      ---
      duration_ms: 0.113542
      type: 'test'
      ...
    # Subtest: should validate item types
    ok 4 - should validate item types
      ---
      duration_ms: 0.073209
      type: 'test'
      ...
    # Subtest: should handle optional arrays
    ok 5 - should handle optional arrays
      ---
      duration_ms: 0.053583
      type: 'test'
      ...
    # Subtest: should validate nested arrays
    ok 6 - should validate nested arrays
      ---
      duration_ms: 0.048917
      type: 'test'
      ...
    1..6
ok 6 - ArrayValidator
  ---
  duration_ms: 1.04275
  type: 'suite'
  ...
# Subtest: ObjectValidator
    # Subtest: should validate objects with correct schema
    ok 1 - should validate objects with correct schema
      ---
      duration_ms: 0.117917
      type: 'test'
      ...
    # Subtest: should reject non-objects
    ok 2 - should reject non-objects
      ---
      duration_ms: 0.044875
      type: 'test'
      ...
    # Subtest: should reject arrays
    ok 3 - should reject arrays
      ---
      duration_ms: 0.0425
      type: 'test'
      ...
    # Subtest: should validate required fields
    ok 4 - should validate required fields
      ---
      duration_ms: 0.055958
      type: 'test'
      ...
    # Subtest: should handle optional fields
    ok 5 - should handle optional fields
      ---
      duration_ms: 0.055084
      type: 'test'
      ...
    # Subtest: should reject extra properties in strict mode
    ok 6 - should reject extra properties in strict mode
      ---
      duration_ms: 0.047
      type: 'test'
      ...
    # Subtest: should allow extra properties when allowExtra is called
    ok 7 - should allow extra properties when allowExtra is called
      ---
      duration_ms: 0.050459
      type: 'test'
      ...
    # Subtest: should handle nested objects
    ok 8 - should handle nested objects
      ---
      duration_ms: 0.056166
      type: 'test'
      ...
    # Subtest: should handle optional objects
    ok 9 - should handle optional objects
      ---
      duration_ms: 0.042959
      type: 'test'
      ...
    1..9
ok 7 - ObjectValidator
  ---
  duration_ms: 0.637041
  type: 'suite'
  ...
# Subtest: Complex Schema Validation
    # Subtest: should validate the predefined user schema with valid data
    ok 1 - should validate the predefined user schema with valid data
      ---
      duration_ms: 0.154542
      type: 'test'
      ...
    # Subtest: should reject invalid user data
    ok 2 - should reject invalid user data
      ---
      duration_ms: 0.095375
      type: 'test'
      ...
    # Subtest: should handle optional fields in user schema
    ok 3 - should handle optional fields in user schema
      ---
      duration_ms: 0.069417
      type: 'test'
      ...
    # Subtest: should validate address schema separately
    ok 4 - should validate address schema separately
      ---
      duration_ms: 0.051458
      type: 'test'
      ...
    1..4
ok 8 - Complex Schema Validation
  ---
  duration_ms: 0.579917
  type: 'suite'
  ...
# Subtest: Edge Cases and Error Handling
    # Subtest: should handle null values
    ok 1 - should handle null values
      ---
      duration_ms: 0.148167
      type: 'test'
      ...
    # Subtest: should handle undefined values
    ok 2 - should handle undefined values
      ---
      duration_ms: 0.041834
      type: 'test'
      ...
    # Subtest: should handle empty strings
    ok 3 - should handle empty strings
      ---
      duration_ms: 0.040417
      type: 'test'
      ...
    # Subtest: should handle empty arrays
    ok 4 - should handle empty arrays
      ---
      duration_ms: 0.042708
      type: 'test'
      ...
    # Subtest: should handle empty objects
    ok 5 - should handle empty objects
      ---
      duration_ms: 0.046416
      type: 'test'
      ...
    # Subtest: should preserve data types in successful validation
    ok 6 - should preserve data types in successful validation
      ---
      duration_ms: 0.073458
      type: 'test'
      ...
    1..6
ok 9 - Edge Cases and Error Handling
  ---
  duration_ms: 0.49875
  type: 'suite'
  ...
# Subtest: Performance and Chainability
    # Subtest: should support method chaining
    ok 1 - should support method chaining
      ---
      duration_ms: 0.112666
      type: 'test'
      ...
    # Subtest: should validate large datasets efficiently
    ok 2 - should validate large datasets efficiently
      ---
      duration_ms: 1.863125
      type: 'test'
      ...
    # Subtest: should handle deeply nested objects
    ok 3 - should handle deeply nested objects
      ---
      duration_ms: 0.076833
      type: 'test'
      ...
    1..3
ok 10 - Performance and Chainability
  ---
  duration_ms: 2.147459
  type: 'suite'
  ...
# Subtest: Real-world Use Cases
    # Subtest: should validate API request payload
    ok 1 - should validate API request payload
      ---
      duration_ms: 0.10475
      type: 'test'
      ...
    # Subtest: should validate database configuration
    ok 2 - should validate database configuration
      ---
      duration_ms: 0.077166
      type: 'test'
      ...
    # Subtest: should validate form data with complex validation rules
    ok 3 - should validate form data with complex validation rules
      ---
      duration_ms: 0.186209
      type: 'test'
      ...
    1..3
ok 11 - Real-world Use Cases
  ---
  duration_ms: 0.42675
  type: 'suite'
  ...
1..11
# tests 60
# suites 11
# pass 60
# fail 0
# cancelled 0
# skipped 0
# todo 0
# duration_ms 89.690333
# start of coverage report
# ----------------------------------------------------------------------------------------
# file      | line % | branch % | funcs % | uncovered lines
# ----------------------------------------------------------------------------------------
# schema.js |  98.00 |    96.50 |   97.67 | 75-76 283-284 327-328 391-392 453-454 631-633
# ----------------------------------------------------------------------------------------
# all files |  98.00 |    96.50 |   97.67 | 
# ----------------------------------------------------------------------------------------
# end of coverage report
